apiVersion: v1
kind: ConfigMap
metadata:
  name: full-simulator
  namespace: claude-code
data:
  simulate-full-metrics.sh: |
    #!/bin/bash
    echo "Starting Claude Code full metric simulation..."
    
    # Function to send metrics to OTLP
    send_metric() {
      local metric_name=$1
      local value=$2
      local attributes=$3
      local timestamp=$(date +%s)000000000
      
      # Build attributes JSON
      local attr_json=""
      if [ -n "$attributes" ]; then
        attr_json=', "attributes": ['$attributes']'
      fi
      
      cat <<EOF > /tmp/metrics.json
    {
      "resource_metrics": [{
        "resource": {
          "attributes": [{
            "key": "service.name",
            "value": { "string_value": "claude-code" }
          }, {
            "key": "github.user", 
            "value": { "string_value": "test-user-001" }
          }, {
            "key": "environment",
            "value": { "string_value": "production" }
          }]
        },
        "scope_metrics": [{
          "scope": {
            "name": "claude-code-simulator"
          },
          "metrics": [{
            "name": "$metric_name",
            "unit": "1",
            "gauge": {
              "data_points": [{
                "time_unix_nano": "$timestamp",
                "as_double": $value
                $attr_json
              }]
            }
          }]
        }]
      }]
    }
    EOF
      
      curl -X POST http://otel-collector-opentelemetry-collector.telemetry.svc.cluster.local:4318/v1/metrics \
        -H "Content-Type: application/json" \
        -d @/tmp/metrics.json \
        --silent --show-error > /dev/null 2>&1
    }
    
    # Initialize counters
    session_count=1
    total_lines=0
    total_tokens=0
    total_cost=0
    commit_count=0
    pr_count=0
    
    # Send initial session metric
    send_metric "session.count" "$session_count"
    
    while true; do
      echo "$(date): Simulating Claude Code activity..."
      
      # Simulate code editing with language attributes
      languages=("python" "javascript" "go" "rust" "typescript")
      for lang in "${languages[@]}"; do
        if [ $((RANDOM % 3)) -lt 2 ]; then
          lines=$((RANDOM % 50 + 10))
          total_lines=$((total_lines + lines))
          operation=$( [ $((RANDOM % 2)) -eq 0 ] && echo "add" || echo "remove" )
          
          attr='{"key": "operation", "value": {"string_value": "'$operation'"}}, {"key": "language", "value": {"string_value": "'$lang'"}}'
          send_metric "lines_of_code.count" "$total_lines" "$attr"
          echo "  Code modified: $lines lines of $lang ($operation)"
        fi
      done
      
      # Simulate token usage with model attributes
      models=("claude-3-5-sonnet-20241022" "claude-3-opus-20240229" "claude-3-haiku-20240307")
      selected_model=${models[$RANDOM % ${#models[@]}]}
      tokens=$((RANDOM % 500 + 100))
      total_tokens=$((total_tokens + tokens))
      
      # Token usage with type
      for token_type in "input" "output"; do
        type_tokens=$((tokens / 2))
        attr='{"key": "type", "value": {"string_value": "'$token_type'"}}, {"key": "model", "value": {"string_value": "'$selected_model'"}}'
        send_metric "token.usage" "$total_tokens" "$attr"
      done
      echo "  Tokens used: $tokens (model: $selected_model)"
      
      # Simulate cost
      cost=$(echo "scale=4; $tokens * 0.00001" | bc)
      total_cost=$(echo "scale=4; $total_cost + $cost" | bc)
      attr='{"key": "model", "value": {"string_value": "'$selected_model'"}}'
      send_metric "cost.usage" "$total_cost" "$attr"
      echo "  Cost incurred: \$$cost"
      
      # Simulate commits (every 3rd iteration)
      if [ $((RANDOM % 3)) -eq 0 ]; then
        commit_count=$((commit_count + 1))
        send_metric "commit.count" "$commit_count"
        echo "  Git commit created (#$commit_count)"
      fi
      
      # Simulate pull requests (every 5th iteration)
      if [ $((RANDOM % 5)) -eq 0 ]; then
        pr_count=$((pr_count + 1))
        send_metric "pull_request.count" "$pr_count"
        echo "  Pull request created (#$pr_count)"
      fi
      
      # Simulate tool usage decisions
      tools=("Read" "Write" "Edit" "MultiEdit" "Bash")
      decisions=("accepted" "rejected")
      for i in {1..3}; do
        tool=${tools[$RANDOM % ${#tools[@]}]}
        decision=${decisions[$RANDOM % ${#decisions[@]}]}
        language=${languages[$RANDOM % ${#languages[@]}]}
        
        attr='{"key": "tool", "value": {"string_value": "'$tool'"}}, {"key": "decision", "value": {"string_value": "'$decision'"}}, {"key": "language", "value": {"string_value": "'$language'"}}'
        send_metric "code_edit_tool.decision" "1" "$attr"
        echo "  Tool decision: $tool - $decision (language: $language)"
      done
      
      echo "Metrics sent. Waiting 15 seconds..."
      sleep 15
    done
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: claude-code-full-simulator
  namespace: claude-code
spec:
  replicas: 1
  selector:
    matchLabels:
      app: full-simulator
  template:
    metadata:
      labels:
        app: full-simulator
    spec:
      containers:
      - name: simulator
        image: alpine:3.19
        command: ["/bin/sh"]
        args: 
          - -c
          - |
            apk add --no-cache curl bc bash
            bash /scripts/simulate-full-metrics.sh
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 64Mi
      volumes:
      - name: scripts
        configMap:
          name: full-simulator