apiVersion: v1
kind: ConfigMap
metadata:
  name: metric-simulator
  namespace: claude-code
data:
  simulate-metrics.sh: |
    #!/bin/bash
    echo "Starting Claude Code metric simulation..."
    
    # Function to send metrics to OTLP
    send_metric() {
      local metric_name=$1
      local value=$2
      local timestamp=$(date +%s)000000000
      
      cat <<EOF > /tmp/metrics.json
    {
      "resource_metrics": [{
        "resource": {
          "attributes": [{
            "key": "service.name",
            "value": { "string_value": "claude-code" }
          }]
        },
        "scope_metrics": [{
          "scope": {
            "name": "claude-code-simulator"
          },
          "metrics": [{
            "name": "$metric_name",
            "unit": "1",
            "gauge": {
              "data_points": [{
                "time_unix_nano": "$timestamp",
                "as_double": $value,
                "attributes": []
              }]
            }
          }]
        }]
      }]
    }
    EOF
      
      # Send to OTLP collector
      curl -X POST http://otel-collector-opentelemetry-collector.telemetry.svc.cluster.local:4318/v1/metrics \
        -H "Content-Type: application/json" \
        -d @/tmp/metrics.json \
        --silent --show-error
    }
    
    # Simulate metrics every 10 seconds
    while true; do
      echo "$(date): Sending simulated metrics..."
      
      # Simulate session count
      send_metric "session.count" "1"
      
      # Simulate lines of code (random between 10-100)
      lines=$((RANDOM % 91 + 10))
      send_metric "lines_of_code.count" "$lines"
      
      # Simulate token usage (random between 100-1000)
      tokens=$((RANDOM % 901 + 100))
      send_metric "token.usage" "$tokens"
      
      # Simulate cost (random between 0.01-0.10)
      cost=$(echo "scale=2; ($(($RANDOM % 10)) + 1) / 100" | bc)
      send_metric "cost.usage" "$cost"
      
      echo "Metrics sent: session=1, lines=$lines, tokens=$tokens, cost=$cost"
      
      sleep 10
    done
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: claude-code-metric-simulator
  namespace: claude-code
spec:
  replicas: 1
  selector:
    matchLabels:
      app: metric-simulator
  template:
    metadata:
      labels:
        app: metric-simulator
    spec:
      containers:
      - name: simulator
        image: alpine:3.19
        command: ["/bin/sh"]
        args: 
          - -c
          - |
            apk add --no-cache curl bc bash
            bash /scripts/simulate-metrics.sh
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 64Mi
      volumes:
      - name: scripts
        configMap:
          name: metric-simulator