---
# Optimized ARC runners with persistent cache and pre-staged images
# Designed for fast Rust builds with NVMe storage

# Enhanced namespace with privileged pod security
apiVersion: v1
kind: Namespace
metadata:
  name: arc-systems-optimized
  labels:
    pod-security.kubernetes.io/enforce: privileged
    pod-security.kubernetes.io/warn: privileged
    pod-security.kubernetes.io/audit: privileged
---
# Service account for optimized runners
apiVersion: v1
kind: ServiceAccount
metadata:
  name: github-runner-optimized
  namespace: arc-systems-optimized
---
# ClusterRole for deployment permissions (same as before)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: github-runner-deploy-optimized
rules:
  # Core resources
  - apiGroups: [""]
    resources: ["namespaces", "services", "secrets", "configmaps", "persistentvolumeclaims"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["pods", "pods/log", "nodes"]
    verbs: ["get", "list"]
  # Apps resources
  - apiGroups: ["apps"]
    resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  # Batch resources
  - apiGroups: ["batch"]
    resources: ["jobs", "cronjobs"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  # RBAC resources
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  # CRDs
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  # TaskRun CRD
  - apiGroups: ["orchestrator.io"]
    resources: ["taskruns"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  # Helm resources
  - apiGroups: ["helm.sh"]
    resources: ["*"]
    verbs: ["*"]
---
# Bind ClusterRole to service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: github-runner-deploy-optimized
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: github-runner-deploy-optimized
subjects:
  - kind: ServiceAccount
    name: github-runner-optimized
    namespace: arc-systems-optimized
---
# Persistent Volume Claims for shared caches
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rust-cache-shared
  namespace: arc-systems-optimized
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: local-path  # Your local storage provisioner
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cargo-registry-shared
  namespace: arc-systems-optimized
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: local-path
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sccache-shared
  namespace: arc-systems-optimized
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 30Gi
  storageClassName: local-path
---
# ConfigMap for Rust build optimizations
apiVersion: v1
kind: ConfigMap
metadata:
  name: rust-build-config
  namespace: arc-systems-optimized
data:
  cargo-config.toml: |
    [build]
    jobs = 0  # Use all available cores

    [target.x86_64-unknown-linux-gnu]
    linker = "/usr/bin/clang-15"
    rustflags = ["-C", "link-arg=--ld-path=/usr/local/bin/mold"]

    [profile.dev]
    debug = 0
    strip = "debuginfo"
    incremental = true

    [profile.dev.package."*"]
    opt-level = 3
    debug = 2

    [profile.dev.build-override]
    opt-level = 3

    [net]
    git-fetch-with-cli = true

    [cargo-new]
    vcs = "none"

  mold-setup.sh: |
    #!/bin/bash
    # Install mold linker
    if [ ! -f /usr/local/bin/mold ]; then
      echo "Installing mold linker..."
      wget -qO- https://github.com/rui314/mold/releases/download/v2.4.0/mold-2.4.0-x86_64-linux.tar.gz | tar xz
      sudo cp mold-2.4.0-x86_64-linux/bin/mold /usr/local/bin/
      sudo chmod +x /usr/local/bin/mold
      echo "Mold installed successfully"
    fi
---
# Optimized organization-level runners
apiVersion: actions.summerwind.dev/v1alpha1
kind: RunnerDeployment
metadata:
  name: org-runners-optimized
  namespace: arc-systems-optimized
spec:
  replicas: 2  # Increased for better parallelism
  template:
    spec:
      # Organization-level configuration
      organization: 5dlabs

      # GitHub authentication
      githubAPICredentialsFrom:
        secretRef:
          name: arc-github-token

      # Runner labels
      labels:
        - self-hosted
        - linux
        - x64
        - k8s-runner
        - rust-optimized
        - nvme-cache

      # Enhanced resources for Rust builds
      resources:
        limits:
          cpu: "8"      # Doubled CPU
          memory: "16Gi" # Doubled memory
        requests:
          cpu: "2"
          memory: "4Gi"

      # Pre-staged image with Rust toolchain and tools
      image: ghcr.io/5dlabs/agent-platform/rust-builder:feature-example-project-and-cli-52f7227
      dockerEnabled: true
      dockerdWithinRunnerContainer: true

      # Environment optimizations
      env:
        - name: RUNNER_FEATURE_FLAG_EPHEMERAL
          value: "false"
        - name: PATH
          value: "/shared/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        # Rust optimizations
        - name: CARGO_HOME
          value: "/cache/cargo"
        - name: RUSTUP_HOME
          value: "/cache/rustup"
        - name: SCCACHE_DIR
          value: "/cache/sccache"
        - name: SCCACHE_CACHE_SIZE
          value: "20G"
        - name: RUSTC_WRAPPER
          value: "sccache"
        - name: CARGO_INCREMENTAL
          value: "1"
        - name: CARGO_NET_GIT_FETCH_WITH_CLI
          value: "true"
        # Performance tuning
        - name: MAKEFLAGS
          value: "-j$(nproc)"
        - name: CARGO_BUILD_JOBS
          value: "0"  # Use all cores

      # Service account
      serviceAccountName: github-runner-optimized

      # Init container for setup
      initContainers:
        - name: setup-build-env
          image: ghcr.io/5dlabs/agent-platform/rust-builder:feature-example-project-and-cli-52f7227
          command: ["/bin/bash", "-c"]
          args:
            - |
              echo "Setting up optimized build environment..."

              # Create cache directories
              mkdir -p /cache/cargo/{registry,git}
              mkdir -p /cache/rustup
              mkdir -p /cache/sccache
              mkdir -p /shared/bin

              # Set permissions
              chown -R 1000:1000 /cache
              chmod -R 755 /cache

              # Copy pre-installed tools to shared volume
              cp /usr/local/bin/* /shared/bin/ 2>/dev/null || true
              cp /usr/bin/kubectl /shared/bin/ 2>/dev/null || true
              cp /usr/local/bin/helm /shared/bin/ 2>/dev/null || true

              # Setup Cargo config
              mkdir -p /cache/cargo
              cp /config/cargo-config.toml /cache/cargo/config.toml

              # Warm up sccache
              echo "Warming up sccache..."
              sccache --start-server || true

              echo "Build environment ready!"
          volumeMounts:
            - name: cargo-cache
              mountPath: /cache/cargo
            - name: sccache-cache
              mountPath: /cache/sccache
            - name: shared-tools
              mountPath: /shared
            - name: rust-config
              mountPath: /config
          securityContext:
            runAsUser: 0  # Need root for setup

      # Volumes for persistent caching
      volumes:
        - name: cargo-cache
          persistentVolumeClaim:
            claimName: cargo-registry-shared
        - name: rust-cache
          persistentVolumeClaim:
            claimName: rust-cache-shared
        - name: sccache-cache
          persistentVolumeClaim:
            claimName: sccache-shared
        - name: shared-tools
          emptyDir: {}
        - name: rust-config
          configMap:
            name: rust-build-config
            defaultMode: 0755

      volumeMounts:
        - name: cargo-cache
          mountPath: /cache/cargo
        - name: rust-cache
          mountPath: /cache/rust
        - name: sccache-cache
          mountPath: /cache/sccache
        - name: shared-tools
          mountPath: /shared
        - name: rust-config
          mountPath: /config

      # Security context
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000

      # Node affinity for NVMe nodes (optional)
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/control-plane
                    operator: DoesNotExist
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: storage-type
                operator: In
                values: ["nvme"]