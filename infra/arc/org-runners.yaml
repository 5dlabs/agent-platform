---
# Organization-level GitHub runners for 5dlabs
# Single consolidated configuration with rust-builder image and persistent storage
# This replaces all other runner configurations

apiVersion: v1
kind: Namespace
metadata:
  name: arc-systems
  labels:
    pod-security.kubernetes.io/enforce: privileged
    pod-security.kubernetes.io/warn: privileged
    pod-security.kubernetes.io/audit: privileged

---
# Service account for runners
apiVersion: v1
kind: ServiceAccount
metadata:
  name: github-runner
  namespace: arc-systems

---
# ClusterRole for deployment permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: github-runner-deploy
rules:
  # Core resources
  - apiGroups: [""]
    resources: ["namespaces", "services", "secrets", "configmaps", "persistentvolumeclaims"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["pods", "pods/log", "nodes"]
    verbs: ["get", "list"]
  # Apps resources
  - apiGroups: ["apps"]
    resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  # Batch resources
  - apiGroups: ["batch"]
    resources: ["jobs", "cronjobs"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  # RBAC resources
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  # CRDs
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  # TaskRun CRD
  - apiGroups: ["orchestrator.io"]
    resources: ["taskruns"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  # Helm resources
  - apiGroups: ["helm.sh"]
    resources: ["*"]
    verbs: ["*"]

---
# Bind ClusterRole to service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: github-runner-deploy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: github-runner-deploy
subjects:
  - kind: ServiceAccount
    name: github-runner
    namespace: arc-systems

---
# GitHub token secret - MUST BE CREATED MANUALLY
# kubectl create secret generic arc-github-token -n arc-systems --from-literal=github-token=YOUR_PAT_TOKEN
# The PAT needs: admin:org, repo, workflow

---
# Persistent storage for caching
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rust-cache-pvc
  namespace: arc-systems
spec:
  accessModes:
    - ReadWriteOnce  # local-path doesn't support ReadWriteMany
  resources:
    requests:
      storage: 100Gi  # Adjust based on your needs
  storageClassName: local-path  # Use the available storage class

---
# Organization-level runners
apiVersion: actions.summerwind.dev/v1alpha1
kind: RunnerDeployment
metadata:
  name: org-runners
  namespace: arc-systems
spec:
  replicas: 1  # Adjust based on workload

  template:
    spec:
      # Repository-level runners for testing
      repository: 5dlabs/agent-platform

      # Runner labels
      labels:
        - self-hosted
        - linux
        - x64
        - k8s-runner
        - rust-builder
        - org-runner
        - agent-platform

      # Use the versioned rust-builder image
      image: ghcr.io/5dlabs/agent-platform/rust-builder:1.1.0
      imagePullPolicy: Always

      # Image pull secret for ghcr.io
      imagePullSecrets:
        - name: ghcr-secret

      # Resources
      resources:
        limits:
          cpu: "4"
          memory: "8Gi"
        requests:
          cpu: "2"
          memory: "4Gi"

      # Enable Docker-in-Docker (using DinD container approach for Talos)
      dockerEnabled: true
      dockerdWithinRunnerContainer: true

      # Environment variables for PVC-based caching
      env:
        - name: RUNNER_FEATURE_FLAG_EPHEMERAL
          value: "true"
        - name: PATH
          value: "/home/runner/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        # PVC-based cache locations
        - name: CARGO_HOME
          value: "/cache/cargo"
        - name: RUSTUP_HOME
          value: "/cache/rustup"
        - name: SCCACHE_DIR
          value: "/cache/sccache"
        - name: SCCACHE_CACHE_SIZE
          value: "40G"
        - name: RUSTC_WRAPPER
          value: "sccache"
        # Additional cache directories
        - name: CARGO_TARGET_DIR
          value: "/cache/target"

      # Volume mounts for persistent caching
      volumeMounts:
        - name: rust-cache
          mountPath: /cache
          subPath: rust-cache  # Use subPath to organize cache within PVC

      # Volumes with persistent storage
      volumes:
        - name: rust-cache
          persistentVolumeClaim:
            claimName: rust-cache-pvc

      # GitHub credentials
      githubAPICredentialsFrom:
        secretRef:
          name: controller-manager

      # Service account with deployment permissions
      serviceAccountName: github-runner

      # Security context
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000

      # Init container to set up cache directories with proper permissions
      initContainers:
        - name: setup-cache
          image: ghcr.io/5dlabs/agent-platform/rust-builder:1.1.0
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "Setting up cache directories..."
              mkdir -p /cache/cargo /cache/rustup /cache/sccache /cache/target
              chown -R 1000:1000 /cache
              chmod -R 755 /cache
              echo "Cache setup complete"
          volumeMounts:
            - name: rust-cache
              mountPath: /cache
              subPath: rust-cache
          securityContext:
            runAsUser: 0  # Run as root to set permissions
            runAsGroup: 0

---
# Image pull secret for ghcr.io (if needed)
# kubectl create secret docker-registry ghcr-secret -n arc-systems \
#   --docker-server=ghcr.io \
#   --docker-username=YOUR_GITHUB_USERNAME \
#   --docker-password=YOUR_GITHUB_TOKEN