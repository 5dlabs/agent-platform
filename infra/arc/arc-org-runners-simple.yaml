---
# Simplified optimized ARC runners (no pre-staged image required)
# Still much faster than default with persistent cache and mold linker

apiVersion: v1
kind: Namespace
metadata:
  name: arc-systems-simple
  labels:
    pod-security.kubernetes.io/enforce: privileged
    pod-security.kubernetes.io/warn: privileged
    pod-security.kubernetes.io/audit: privileged
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: github-runner-simple
  namespace: arc-systems-simple
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: github-runner-deploy-simple
rules:
  - apiGroups: [""]
    resources: ["namespaces", "services", "secrets", "configmaps", "persistentvolumeclaims"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["pods", "pods/log", "nodes"]
    verbs: ["get", "list"]
  - apiGroups: ["apps"]
    resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  - apiGroups: ["batch"]
    resources: ["jobs", "cronjobs"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  - apiGroups: ["orchestrator.io"]
    resources: ["taskruns"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  - apiGroups: ["helm.sh"]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: github-runner-deploy-simple
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: github-runner-deploy-simple
subjects:
  - kind: ServiceAccount
    name: github-runner-simple
    namespace: arc-systems-simple
---
# Persistent cache volumes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cargo-cache-simple
  namespace: arc-systems-simple
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 30Gi
  storageClassName: local-path
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sccache-simple
  namespace: arc-systems-simple
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 30Gi
  storageClassName: local-path
---
# Simple optimized runners
apiVersion: actions.summerwind.dev/v1alpha1
kind: RunnerDeployment
metadata:
  name: org-runners-simple
  namespace: arc-systems-simple
spec:
  replicas: 4
  template:
    spec:
      organization: 5dlabs
      githubAPICredentialsFrom:
        secretRef:
          name: arc-github-token

      labels:
        - self-hosted
        - linux
        - x64
        - k8s-runner
        - rust-fast
        - simple

      # Enhanced resources
      resources:
        limits:
          cpu: "8"
          memory: "16Gi"
        requests:
          cpu: "2"
          memory: "4Gi"

      # Use standard image but with optimizations
      image: summerwind/actions-runner-dind:latest
      dockerEnabled: true
      dockerdWithinRunnerContainer: true

      env:
        - name: RUNNER_FEATURE_FLAG_EPHEMERAL
          value: "true"
        - name: PATH
          value: "/shared/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        - name: CARGO_HOME
          value: "/cache/cargo"
        - name: SCCACHE_DIR
          value: "/cache/sccache"
        - name: SCCACHE_CACHE_SIZE
          value: "20G"
        - name: RUSTC_WRAPPER
          value: "sccache"

      serviceAccountName: github-runner-simple

      # Setup container that installs optimizations
      initContainers:
        - name: setup-rust-optimizations
          image: ubuntu:22.04
          command: ["/bin/bash", "-c"]
          args:
            - |
              set -euo pipefail
              echo "ðŸš€ Setting up Rust optimizations..."

              # Update and install essentials
              apt-get update
              apt-get install -y curl wget build-essential clang-15 git

              # Install mold linker
              echo "Installing mold linker..."
              wget -qO- https://github.com/rui314/mold/releases/download/v2.4.0/mold-2.4.0-x86_64-linux.tar.gz | tar xz
              cp mold-2.4.0-x86_64-linux/bin/mold /shared/bin/
              chmod +x /shared/bin/mold

              # Install tools
              echo "Installing kubectl..."
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl && mv kubectl /shared/bin/

              echo "Installing helm..."
              curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
              mv /usr/local/bin/helm /shared/bin/

              # Setup cache directories
              mkdir -p /cache/{cargo,sccache}
              chown -R 1000:1000 /cache

              echo "âœ… Setup complete!"
          volumeMounts:
            - name: shared-tools
              mountPath: /shared/bin
            - name: cargo-cache
              mountPath: /cache/cargo
            - name: sccache-cache
              mountPath: /cache/sccache
          securityContext:
            runAsUser: 0

      volumes:
        - name: cargo-cache
          persistentVolumeClaim:
            claimName: cargo-cache-simple
        - name: sccache-cache
          persistentVolumeClaim:
            claimName: sccache-simple
        - name: shared-tools
          emptyDir: {}

      volumeMounts:
        - name: cargo-cache
          mountPath: /cache/cargo
        - name: sccache-cache
          mountPath: /cache/sccache
        - name: shared-tools
          mountPath: /shared/bin

      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000