#!/bin/bash
set -e

echo '════════════════════════════════════════════════════════════════'
echo '║                    INIT CONTAINER STARTING                   ║'
echo '║                   (prepare-workspace)                        ║'
echo '════════════════════════════════════════════════════════════════'

echo '✓ Using Claude Code image with pre-installed tools'
which git >/dev/null && echo '✓ Git is available' || echo '✗ Git not found!'
which gh >/dev/null && echo '✓ GitHub CLI is available' || echo '✗ GitHub CLI not found!'

{{#if repository}}
echo 'Cloning repository: {{repository.url}}'

# Setup GitHub authentication
export GITHUB_TOKEN=$(cat /secrets/github-pat-{{repository.githubUser}}/token 2>/dev/null)
if [ -n "$GITHUB_TOKEN" ]; then
  echo "GitHub token loaded from secret: github-pat-{{repository.githubUser}}"
  
  # Configure git global settings
  git config --global user.name "Claude Agent"
  git config --global user.email "claude@5dlabs.com"
  git config --global credential.helper store
  
  # Configure gh CLI
  echo "$GITHUB_TOKEN" | gh auth login --with-token 2>/dev/null || echo "gh auth already configured"
  
  # Write token to git credentials file
  echo "https://{{repository.githubUser}}:${GITHUB_TOKEN}@github.com" > /workspace/.git-credentials
  
  # Ensure git config is accessible to the agent user
  chmod 644 /workspace/.git-credentials
else
  echo "Warning: GitHub token not found in secret: github-pat-{{repository.githubUser}}"
fi

# Smart repository management - only clone on first task for a service
cd /workspace

# Check if we're continuing work on the same service
SKIP_CLONE=false
if [ -f "/workspace/.current-service" ]; then
  CURRENT_SERVICE=$(cat /workspace/.current-service)
  if [ "$CURRENT_SERVICE" = "{{service_name}}" ]; then
    echo "Continuing work on service: $CURRENT_SERVICE"
    echo "Using existing code from previous tasks"
    SKIP_CLONE=true
  else
    echo "Switching from service '$CURRENT_SERVICE' to '{{service_name}}'"
    # Clean up for new service
    echo "Backing up previous service files..."
    mkdir -p "/workspace/.backup-${CURRENT_SERVICE}"
    find . -maxdepth 1 -not -name '.backup*' -not -name '.task' -not -name '.' -exec mv {} "/workspace/.backup-${CURRENT_SERVICE}/" \; 2>/dev/null || true
  fi
else
  echo "First task - no previous service found"
fi

# Save current service for next task
echo "{{service_name}}" > /workspace/.current-service

# Only clone if needed
if [ "$SKIP_CLONE" = "false" ]; then
  if [ ! -d '.git' ]; then
    if [ -z "$(ls -A . 2>/dev/null | grep -v '.current-service' | grep -v '.task' | grep -v '.backup')" ]; then
      echo 'Directory is empty, cloning repository...'
      git clone --depth 1 --branch {{repository.branch}} {{repository.url}} . || echo 'Clone failed, continuing...'
    else
      echo 'Directory not empty but not a Git repo, backing up existing files and cloning...'
      mkdir -p .backup
      find . -maxdepth 1 -not -name '.backup*' -not -name '.task' -not -name '.current-service' -not -name '.' -exec mv {} .backup/ \; 2>/dev/null || true
      git clone --depth 1 --branch {{repository.branch}} {{repository.url}} . || echo 'Clone failed, continuing...'
      echo 'Repository cloned, existing files backed up to .backup/'
    fi
  else
    echo 'Git repository exists for new service, checking remote...'
    CURRENT_REMOTE=$(git remote get-url origin 2>/dev/null || echo '')
    if [ "$CURRENT_REMOTE" != "{{repository.url}}" ]; then
      echo "Remote URL mismatch. Expected: {{repository.url}}, Got: $CURRENT_REMOTE"
      echo "Removing old repository and cloning fresh..."
      rm -rf .git
      git clone --depth 1 --branch {{repository.branch}} {{repository.url}} . || echo 'Clone failed, continuing...'
    fi
  fi
else
  # Continuing with same service - just ensure we're on the right branch
  if [ -d '.git' ]; then
    CURRENT_BRANCH=$(git branch --show-current 2>/dev/null || echo '')
    if [ "$CURRENT_BRANCH" != "{{repository.branch}}" ]; then
      echo "Switching to branch {{repository.branch}}..."
      git checkout {{repository.branch}} 2>/dev/null || echo "Branch checkout failed, continuing with current branch"
    fi
  fi
fi
{{else}}
echo 'No repository specified, using empty workspace'
{{/if}}

# Create workspace directory structure (after cloning to avoid conflicts)
# Use attempt-specific subdirectory to preserve history
mkdir -p /workspace/.task/{{task_id}}/attempt-{{attempts}}

# Copy task files to attempt-specific directory
cp /config/* /workspace/.task/{{task_id}}/attempt-{{attempts}}/ 2>/dev/null || echo 'No config files to copy'

# Also copy to task root for backward compatibility
cp /config/*.md /workspace/.task/{{task_id}}/ 2>/dev/null || echo 'No markdown files to copy to task root'

# Copy all markdown files to workspace root for @import access
cp /workspace/.task/{{task_id}}/attempt-{{attempts}}/*.md /workspace/ 2>/dev/null || echo 'No markdown files to copy to root'

# Setup Claude Code configuration
mkdir -p /home/node/.claude/todos
cp /config/.claude.json /home/node/.claude.json 2>/dev/null || echo 'No .claude.json to copy'
chmod -R 755 /home/node/.claude
chown -R 1000:1000 /home/node/.claude

# Also copy config to workspace directory
mkdir -p /workspace/.claude
cp /config/.claude.json /workspace/.claude.json 2>/dev/null || echo 'No .claude.json to copy to workspace dir'
cp /config/.claude.json /workspace/.claude/settings.local.json 2>/dev/null || echo 'No .claude.json to copy as settings.local.json'

# Create .gitignore to prevent committing Claude internal files
cat > /workspace/.gitignore << 'EOF'
# Claude Code internal files - do not commit
.claude/
.claude.json
.claude-scripts/
.task/
# Allow Claude session exports to be committed
!.task/*/attempt-*/claude-session.md
!.task/*/attempt-*/claude-session.xml
!.task/*/attempt-*/claude-session-raw.jsonl
task.md
CLAUDE.md
.gitconfig
.git-credentials
.current-service
.backup-*
EOF

# Create Claude scripts directory and export script
mkdir -p /workspace/.claude-scripts
cat > /workspace/.claude-scripts/export-session.sh << 'EXPORT_SCRIPT'
{{{export_script}}}
EXPORT_SCRIPT
chmod +x /workspace/.claude-scripts/export-session.sh

# Create GitHub environment file for main container
{{#if repository}}
if [ -n "$GITHUB_TOKEN" ]; then
  echo "export GITHUB_TOKEN='$GITHUB_TOKEN'" > /workspace/.github-env
  echo "export GITHUB_USER='{{repository.github_user}}'" >> /workspace/.github-env
  chmod 644 /workspace/.github-env
  echo '✓ Created .github-env file for main container'
fi
{{/if}}

# Clean up any credentials from parent workspace
echo 'Cleaning up credentials from parent workspace'
rm -f /workspace/.git-credentials 2>/dev/null || true

# DEBUG: Show configuration details
echo '=== DEBUGGING CONFIGURATION ==='
{{#if repository}}
echo 'Repository URL: {{repository.url}}'
echo 'Repository Branch: {{repository.branch}}'
echo 'GitHub User: {{repository.githubUser}}'
echo 'Secret Name: github-pat-{{repository.githubUser}}'
{{else}}
echo 'No repository specified in TaskRun spec'
{{/if}}
echo 'Claude configuration contents:'
cat /config/.claude.json 2>/dev/null || echo 'No .claude.json found'
echo 'File permissions in .claude directory:'
ls -la /workspace/.claude/ 2>/dev/null || echo 'No .claude directory found'
echo '=== END DEBUGGING ==='

echo 'Workspace prepared successfully'
ls -la /workspace/