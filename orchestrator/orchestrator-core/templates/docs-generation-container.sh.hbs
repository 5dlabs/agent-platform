#!/bin/sh

echo '════════════════════════════════════════════════════════════════'
echo '║                 DOCS GENERATION STARTING                     ║'
echo '════════════════════════════════════════════════════════════════'

# Source GitHub environment if it exists
if [ -f /workspace/.github-env ]; then
  . /workspace/.github-env
  echo "✓ GitHub authentication configured"

  # Configure git credentials for HTTPS authentication
  if [ -n "$GITHUB_TOKEN" ] && [ -n "$GITHUB_USER" ]; then
    git config --global user.name "$GITHUB_USER"
    git config --global user.email "${GITHUB_USER}@users.noreply.github.com"

    # Ensure git credentials file exists with correct format
    echo "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com" > /workspace/.git-credentials
    chmod 600 /workspace/.git-credentials

    # Configure git to use the credentials
    git config --global credential.helper 'store --file=/workspace/.git-credentials'
    cd /workspace && git config credential.helper 'store --file=/workspace/.git-credentials'

    echo "✓ Git credentials configured for user: $GITHUB_USER"
  fi
fi

# Copy ConfigMap files to working directory
echo "=== CONFIGMAP FILE SETUP ==="

# Determine the working directory for Claude
WORKING_DIR="{{working_dir}}"
if [ -n "$WORKING_DIR" ] && [ "$WORKING_DIR" != "." ]; then
  CLAUDE_WORK_DIR="/workspace/$WORKING_DIR"
else
  CLAUDE_WORK_DIR="/workspace"
fi

echo "Setting up files in Claude working directory: $CLAUDE_WORK_DIR"
mkdir -p "$CLAUDE_WORK_DIR"

# Copy all files from ConfigMap to working directory
if [ -d "/config" ]; then
  echo "Copying ConfigMap files to working directory..."

  # Copy markdown files
  cp /config/*.md "$CLAUDE_WORK_DIR/" 2>/dev/null && echo "✓ Copied markdown files" || echo "! No markdown files to copy"

  # Copy Claude settings
  mkdir -p "$CLAUDE_WORK_DIR/.claude"
  cp /config/settings-local.json "$CLAUDE_WORK_DIR/.claude/settings.local.json" 2>/dev/null && echo "✓ Copied Claude settings" || echo "! No Claude settings to copy"

  # Copy hook script
  cp /config/.stop-hook-docs-pr.sh "$CLAUDE_WORK_DIR/.stop-hook-docs-pr.sh" 2>/dev/null && echo "✓ Copied hook script" || echo "! No hook script to copy"
  chmod +x "$CLAUDE_WORK_DIR/.stop-hook-docs-pr.sh" 2>/dev/null

  echo "✓ ConfigMap files copied to $CLAUDE_WORK_DIR"
else
  echo "⚠️  Warning: /config directory not found (ConfigMap not mounted?)"
fi

echo '=== WORKSPACE VALIDATION ==='

# Check for required files in Claude's working directory
MISSING_FILES=""
REQUIRED_FILES="CLAUDE.md .claude/settings.local.json .stop-hook-docs-pr.sh"

echo "Checking for required files..."
for file in $REQUIRED_FILES; do
  if [ ! -f "$CLAUDE_WORK_DIR/$file" ]; then
    echo "ERROR: Missing required file: $CLAUDE_WORK_DIR/$file"
    MISSING_FILES="$MISSING_FILES $file"
  else
    echo "✓ Found: $CLAUDE_WORK_DIR/$file"
    # Show file size for verification
    size=$(wc -c < "$CLAUDE_WORK_DIR/$file" 2>/dev/null || echo "0")
    echo "  File size: $size bytes"
  fi
done

# If any files are missing, abort
if [ -n "$MISSING_FILES" ]; then
  echo ""
  echo "═══════════════════════════════════════════════════════════════"
  echo "║                 WORKSPACE VALIDATION FAILED                  ║"
  echo "═══════════════════════════════════════════════════════════════"
  echo ""
  echo "The following required files are missing:"
  for missing in $MISSING_FILES; do
    case "$missing" in
      "CLAUDE.md")
        echo "  ❌ $missing - Main prompt file with task instructions"
        ;;
      ".claude/settings.local.json")
        echo "  ❌ $missing - Claude Code configuration (permissions, model, etc.)"
        ;;
      ".stop-hook-docs-pr.sh")
        echo "  ❌ $missing - Post-completion hook for auto-commit and PR creation"
        ;;
      *)
        echo "  ❌ $missing"
        ;;
    esac
  done
  echo ""
  echo "These files should have been created by the ConfigMap setup process."
  echo "Claude will NOT be started to avoid wasting API credits."
  echo ""
  exit 1
fi

echo "✓ All required files present. Workspace is valid."

echo '=== DOCUMENTATION GENERATION DIAGNOSTICS ==='
echo "Project directory: $CLAUDE_WORK_DIR"
echo "Project directory contents:"
ls -la "$CLAUDE_WORK_DIR"
echo ""

# Check for .taskmaster directory and tasks.json
if [ -d "$CLAUDE_WORK_DIR/.taskmaster" ]; then
  echo "✓ Found .taskmaster directory"
  if [ -f "$CLAUDE_WORK_DIR/.taskmaster/tasks/tasks.json" ]; then
    echo "✓ Found tasks/tasks.json"
    task_count=$(jq '.tasks | length' "$CLAUDE_WORK_DIR/.taskmaster/tasks/tasks.json" 2>/dev/null || echo "unknown")
    echo "  Task count: $task_count"
  else
    echo "✗ ERROR: tasks/tasks.json not found!"
  fi
else
  echo "✗ ERROR: .taskmaster directory not found!"
fi

# Check git repository
if [ ! -d "$CLAUDE_WORK_DIR/.git" ]; then
  echo "! Note: No git repository found (will be cloned if needed)"
else
  echo "✓ Found: git repository"
fi

echo '=== CLAUDE EXECUTION ==='

# Export necessary variables for the stop hook
export SERVICE_NAME="{{service_name}}"
export TARGET_BRANCH="{{targetBranch}}"
export SOURCE_BRANCH="{{repository.branch}}"
export WORKING_DIR="{{working_dir}}"
export GITHUB_USER="{{repository.githubUser}}"

# Change to project directory before running Claude
cd "$CLAUDE_WORK_DIR"
echo "Changed to directory: $(pwd)"

# Print the prompt we're about to use
echo ""
echo "=== PROMPT CONTENT ==="
echo "Using prompt file: CLAUDE.md"
echo "Prompt content (first 10 lines):"
head -10 "CLAUDE.md" | sed 's/^/  /'
echo "..."
echo "=== END PROMPT ==="
echo ""

# Build Claude command (settings.json handles model, permissions, etc.)
CLAUDE_CMD="claude-code -p --output-format stream-json --verbose"

{{#if is_retry}}
CLAUDE_CMD="$CLAUDE_CMD --continue"
echo 'Adding --continue flag for attempt {{attempts}}'
{{/if}}

echo "Command: $CLAUDE_CMD"
echo "Starting Claude execution..."
echo "=========================="

# Run Claude with CLAUDE.md as input
# (Stop hook will be executed automatically on successful completion)
exec $CLAUDE_CMD < "CLAUDE.md"