#!/bin/sh

echo '════════════════════════════════════════════════════════════════'
echo '║                    MAIN CONTAINER STARTING                   ║'
echo '║                      (claude-agent)                          ║'
echo '════════════════════════════════════════════════════════════════'

# Source GitHub environment if it exists (using . instead of source for sh compatibility)
if [ -f /workspace/.github-env ]; then
  . /workspace/.github-env
  echo "✓ GitHub authentication configured"
fi

# Configure git credentials for HTTPS authentication if GITHUB_TOKEN is available
if [ -n "$GITHUB_TOKEN" ]; then
  echo 'Configuring git credentials for GitHub authentication'
  git config --global user.name "Claude Agent"
  git config --global user.email "claude@5dlabs.com"
  git config --global credential.helper store
  git config --global push.autoSetupRemote true
  
  {{#if repository}}
  # Write token to git credentials file using the correct format
  # Use parent directory for shared credentials
  echo "https://{{repository.githubUser}}:${GITHUB_TOKEN}@github.com" > /workspace/.git-credentials
  
  # Ensure git config is accessible
  chmod 644 /workspace/.git-credentials
  
  # Set git to use the credentials for the specific repository
  cd /workspace
  git remote set-url origin {{repository.url}} 2>/dev/null || true
  {{/if}}
  
  echo 'Git credentials configured successfully'
else
  echo 'Warning: GITHUB_TOKEN not available, git operations may fail'
fi

# Create .gitconfig in parent workspace for global access
cat > /workspace/.gitconfig << 'EOF'
[user]
    name = Claude Agent
    email = claude@5dlabs.com
[credential]
    helper = store
[push]
    autoSetupRemote = true
EOF

echo '=== COMPREHENSIVE CLAUDE DEBUGGING ==='

echo '
--- Environment Variables ---'
env | grep -E '(HOME|PWD|WORKDIR|CLAUDE)' | sort
echo '
--- Current Working Directory ---'
pwd
echo '
--- User Information ---'
whoami
id
echo '
--- Current Directory Tree ---'
echo "PWD: $(pwd)"
echo "Listing /workspace (our mount point):"
ls -la /workspace/ | head -10
echo ""
echo "Checking if we're in a subPath mount by looking at parent:"
ls -la /workspace/.. 2>/dev/null | head -5 || echo "Cannot access parent"
echo ""
echo "Directory tree:"
tree -a . 2>/dev/null || find . -type f 2>/dev/null | head -20
echo '
--- HOME Directory Contents ---'
echo "HOME is set to: $HOME"
ls -la "$HOME" 2>/dev/null || echo 'HOME directory not accessible'
echo '
--- Claude Config Directory ---'
ls -la "$HOME/.claude" 2>/dev/null || echo 'No .claude directory in HOME'
echo '
--- Settings.json Content ---'
cat "$HOME/.claude/settings.json" 2>/dev/null || echo 'No settings.json found in HOME/.claude'
echo '
--- Alternative Claude Config Locations ---'
find . -name 'settings.json' -type f 2>/dev/null
find .. -name 'settings.json' -type f 2>/dev/null | head -5
echo '
--- File Permissions on All Settings.json ---'
find . -name 'settings.json' -exec ls -la {} \; 2>/dev/null
find .. -name 'settings.json' -exec ls -la {} \; 2>/dev/null | head -5
echo '
--- Parent Directory Structure ---'
ls -la .. 2>/dev/null || echo 'Cannot access parent directory'
echo '=== END DEBUGGING - STARTING CLAUDE ==='

echo '
--- CLAUDE CODE SETTINGS DEBUG ---'
echo 'Testing Claude Code settings loading...'
echo 'Claude command: {{command}}'
{{command}} --version 2>/dev/null || echo 'Claude version failed'
{{command}} --help 2>&1 | head -20 || echo 'Claude help failed'
echo '
--- CLAUDE SETTINGS VERIFICATION ---'
echo 'Claude Code uses .claude.json for configuration'
echo 'Checking for .claude.json files:'
find . -name '.claude.json' -type f -exec ls -la {} \; 2>/dev/null
echo '
Content of .claude.json:'
cat /workspace/.claude.json 2>/dev/null || echo 'No .claude.json in /workspace'
echo '
--- CLAUDE SETTINGS FILE DISCOVERY ---'
# Note: Claude Code doesn't have a --print-config-path option
echo 'Claude Code loads settings from .claude.json in the workspace root'
{{#if debug}}
[DEBUG] Reading config from /workspace/.claude.json
[DEBUG] Config parsed successfully from /workspace/.claude.json
[DEBUG] Reading config from /workspace/.claude.json
[DEBUG] Config parsed successfully from /workspace/.claude.json
[DEBUG] Reading config from /workspace/.claude.json
[DEBUG] Config parsed successfully from /workspace/.claude.json
[DEBUG] Reading config from /workspace/.claude.json
[DEBUG] Config parsed successfully from /workspace/.claude.json
[DEBUG] Saving project config for /workspace to /workspace/.claude.json
[DEBUG] Re-reading config from /workspace/.claude.json
{{/if}}

echo '
--- DEVCONTAINER AND ENVIRONMENT VARIABLES ---'
env | grep -E '(DEVCONTAINER|HOSTNAME|OTEL_|CLAUDE_|AGENT_)' | sort
echo '
--- SETTING CLAUDE CONFIG DIRECTORY ---'
# Use the workspace root for Claude config
export CLAUDE_CONFIG_DIR=/workspace/.claude
echo "CLAUDE_CONFIG_DIR set to: $CLAUDE_CONFIG_DIR"
echo '
--- UNSETTING DEVCONTAINER VARIABLES ---'
unset DEVCONTAINER 2>/dev/null || true
unset DEVCONTAINER_CONFIG 2>/dev/null || true
echo 'DEVCONTAINER variables unset'
echo '
--- FINAL SETTINGS CHECK ---'
echo 'Attempting to read settings.json with cat:'
find . -name 'settings.json' -exec echo 'Found settings.json:' {} \; -exec cat {} \; 2>/dev/null
echo '
--- TESTING PERMISSIVE MODE EXPLICITLY ---'
{{command}} --help | grep -i permission || echo 'No permission flags found in help'
{{command}} --help | grep -i allow || echo 'No allow flags found in help'
{{command}} --help | grep -i mode || echo 'No mode flags found in help'
echo '
--- TESTING SIMPLE CLAUDE COMMAND WITHOUT PROMPT ---'
{{command}} --version 2>&1

echo '
--- WORKSPACE VALIDATION ---'

# Pre-flight check - ensure all required files are in place before starting Claude
MISSING_FILES=""
REQUIRED_FILES="CLAUDE.md task.md design-spec.md prompt.md acceptance-criteria.md"

echo "Checking for required files in /workspace..."
for file in $REQUIRED_FILES; do
  if [ ! -f "/workspace/$file" ]; then
    echo "ERROR: Missing required file: $file"
    MISSING_FILES="$MISSING_FILES $file"
  else
    echo "✓ Found: $file"
  fi
done

# Also check for .claude.json configuration
if [ ! -f "/workspace/.claude.json" ]; then
  echo "ERROR: Missing .claude.json configuration file"
  MISSING_FILES="$MISSING_FILES .claude.json"
else
  echo "✓ Found: .claude.json"
  # Check if it has proper allowedTools
  if grep -q '"allowedTools": \[\]' /workspace/.claude.json; then
    echo "WARNING: .claude.json has empty allowedTools array"
  fi
fi

# Check for git repository
if [ ! -d "/workspace/.git" ]; then
  echo "ERROR: No git repository found at /workspace"
  MISSING_FILES="$MISSING_FILES .git"
else
  echo "✓ Found: git repository"
fi

# If any files are missing, abort before starting Claude
if [ -n "$MISSING_FILES" ]; then
  echo ""
  echo "═══════════════════════════════════════════════════════════════"
  echo "║                    WORKSPACE VALIDATION FAILED              ║"
  echo "═══════════════════════════════════════════════════════════════"
  echo ""
  echo "The following required files/directories are missing:"
  echo "$MISSING_FILES"
  echo ""
  echo "This indicates a problem with workspace preparation."
  echo "Claude will NOT be started to avoid wasting API credits."
  echo ""
  echo "Debugging information:"
  echo "- Working directory: $(pwd)"
  echo "- Workspace contents:"
  ls -la /workspace/ | head -20
  echo ""
  echo "Aborting to prevent credit waste."
  exit 1
fi

echo ""
echo "✓ All required files present. Workspace is valid."
echo ""

echo '
--- PREPARING CLAUDE EXECUTION ---'

# Check if prompt.md exists (redundant but kept for compatibility)
if [ -f /workspace/prompt.md ]; then
  echo 'Found prompt.md, will use it as Claude prompt'
else
  echo 'WARNING: prompt.md not found, creating default prompt'
  echo 'Read the task context in CLAUDE.md and begin implementing the requested service. Follow the design specification and ensure all acceptance criteria are met.' > /workspace/prompt.md
fi

echo '
--- STARTING CLAUDE WITH FULL ARGS ---'

# Build Claude command with print mode, streaming output, verbose debugging, and explicit tools
CLAUDE_CMD="{{command}} -p --output-format stream-json --verbose --allowedTools Bash,Edit,Read,Write,Glob,Grep,LS,MultiEdit,WebSearch,WebFetch,TodoRead,TodoWrite"

{{#if model_override}}
CLAUDE_CMD="$CLAUDE_CMD --model={{model}}"
{{/if}}

{{#if is_retry}}
CLAUDE_CMD="$CLAUDE_CMD --continue"
echo 'Adding --continue flag for attempt {{attempts}}'
{{/if}}

# Use stdin to pass the prompt content to avoid shell interpretation issues
echo "Final Claude command: $CLAUDE_CMD (with prompt from stdin)"
exec $CLAUDE_CMD < /workspace/prompt.md