#!/bin/sh
set -e

echo '════════════════════════════════════════════════════════════════'
echo '║                    PREP JOB STARTING                         ║'
echo '║                   (workspace-preparation)                     ║'
echo '════════════════════════════════════════════════════════════════'

# Working directly in the root of the dedicated PVC
echo "Working in dedicated PVC for service: {{service_name}}"
cd /workspace

# Clean up old backup directories from previous failed runs
if ls .backup-* 1> /dev/null 2>&1; then
  echo "Cleaning up old backup directories..."
  rm -rf .backup-*
fi

{{#if repository}}
echo 'Repository management for: {{repository.url}}'

# Setup GitHub authentication if available
export GITHUB_TOKEN=$(cat /secrets/github-pat-{{repository.githubUser}}/token 2>/dev/null || echo "")
if [ -n "$GITHUB_TOKEN" ]; then
  echo "GitHub token loaded from secret: github-pat-{{repository.githubUser}}"
  
  # Configure git for cloning
  git config --global user.name "{{repository.githubUser}}"
  git config --global user.email "{{repository.githubUser}}@users.noreply.github.com"
  git config --global credential.helper store
  
  # Write token to temporary credentials file for cloning
  echo "https://{{repository.githubUser}}:${GITHUB_TOKEN}@github.com" > /tmp/.git-credentials
  cp /tmp/.git-credentials /home/git-credentials
  git config --global credential.helper 'store --file=/home/git-credentials'
  
  # Also set up persistent credentials in workspace for main container
  echo "https://{{repository.githubUser}}:${GITHUB_TOKEN}@github.com" > /workspace/.git-credentials
  chmod 600 /workspace/.git-credentials
else
  echo "Warning: GitHub token not found in secret: github-pat-{{repository.githubUser}}"
fi

# Smart repository management - check if repo already exists
SKIP_CLONE=false
if [ -d ".git" ]; then
  echo "Repository already exists in workspace"
  echo "Using existing code from previous tasks"
  SKIP_CLONE=true
else
  echo "First task for this service - will clone repository"
fi

# No need to track current service - each service has its own PVC now

# Only clone if needed
if [ "$SKIP_CLONE" = "false" ]; then
  if [ ! -d '.git' ]; then
    if [ -z "$(ls -A . 2>/dev/null | grep -v '.current-service' | grep -v '.task' | grep -v '.backup')" ]; then
      echo 'Directory is empty, cloning repository...'
      git clone --depth 1 --branch {{repository.branch}} {{repository.url}} . || {
        echo 'Clone failed - checking error'
        exit 1
      }
    else
      echo 'Directory not empty but not a Git repo, backing up existing files and cloning...'
      BACKUP_DIR=".backup-$(date +%s)"
      mkdir -p "$BACKUP_DIR"
      find . -maxdepth 1 -not -name '.backup*' -not -name '.task' -not -name '.current-service' -not -name '.' -exec mv {} "$BACKUP_DIR/" \; 2>/dev/null || true
      # Clone to a temp directory first, then move contents
      TEMP_CLONE_DIR="/tmp/git-clone-$$"
      git clone --depth 1 --branch {{repository.branch}} {{repository.url}} "$TEMP_CLONE_DIR" || {
        echo 'Clone failed'
        exit 1
      }
      # Move cloned contents to current directory
      mv "$TEMP_CLONE_DIR"/.git .
      mv "$TEMP_CLONE_DIR"/* . 2>/dev/null || true
      rm -rf "$TEMP_CLONE_DIR"
    fi
  else
    echo 'Git repository exists, checking remote...'
    CURRENT_REMOTE=$(git remote get-url origin 2>/dev/null || echo '')
    if [ "$CURRENT_REMOTE" != "{{repository.url}}" ]; then
      echo "Remote URL mismatch. Expected: {{repository.url}}, Got: $CURRENT_REMOTE"
      echo "Removing old repository and cloning fresh..."
      rm -rf .git
      git clone --depth 1 --branch {{repository.branch}} {{repository.url}} . || {
        echo 'Clone failed'
        exit 1
      }
    fi
  fi
else
  # Continuing with same service - just ensure we're on the right branch
  if [ -d '.git' ]; then
    CURRENT_BRANCH=$(git branch --show-current 2>/dev/null || echo '')
    if [ "$CURRENT_BRANCH" != "{{repository.branch}}" ]; then
      echo "Switching to branch {{repository.branch}}..."
      git checkout {{repository.branch}} 2>/dev/null || echo "Branch checkout failed, continuing with current branch"
    fi
  fi
fi

# Create GitHub environment file for main container
if [ -n "$GITHUB_TOKEN" ]; then
  echo "export GITHUB_TOKEN='$GITHUB_TOKEN'" > /workspace/.github-env
  echo "export GITHUB_USER='{{repository.githubUser}}'" >> /workspace/.github-env
  chmod 644 /workspace/.github-env
  echo '✓ Created .github-env file for main container'
fi
{{else}}
echo 'No repository specified, using empty workspace'
{{/if}}

# Create workspace directory structure
echo "Creating task directories..."
mkdir -p /workspace/.task/{{task_id}}/attempt-{{attempts}}

# Copy task files to attempt-specific directory
echo "Copying task files..."
cp /config/* /workspace/.task/{{task_id}}/attempt-{{attempts}}/ 2>/dev/null || echo 'No config files to copy'

# Also copy markdown files to task root for backward compatibility
cp /config/*.md /workspace/.task/{{task_id}}/ 2>/dev/null || true

# Copy all markdown files to workspace root for @import access
cp /workspace/.task/{{task_id}}/attempt-{{attempts}}/*.md /workspace/ 2>/dev/null || echo 'No markdown files to copy to root'

# Copy Claude configuration to workspace with correct hierarchy
mkdir -p /workspace/.claude
cp /config/.claude/settings.local.json /workspace/.claude/settings.local.json 2>/dev/null || echo 'No settings.local.json to copy'


# Create .gitignore to prevent committing Claude internal files
cat > /workspace/.gitignore << 'EOF'
# Claude Code internal files - do not commit
.claude/
.task/
# Allow Claude session exports to be committed
!.task/*/attempt-*/claude-session.md
!.task/*/attempt-*/claude-session.xml
!.task/*/attempt-*/claude-session-raw.jsonl
task.md
design-spec.md
prompt.md
acceptance-criteria.md
CLAUDE.md
.github-env
.gitconfig
.git-credentials
.current-service
.backup-*
EOF

# Clean up temporary credentials
rm -f /tmp/.git-credentials /home/git-credentials 2>/dev/null || true

echo '✓ Workspace preparation complete'
echo 'Workspace contents:'
ls -la /workspace/
echo ''
echo 'Task files:'
ls -la /workspace/.task/{{task_id}}/attempt-{{attempts}}/