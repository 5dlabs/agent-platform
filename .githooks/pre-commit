#!/bin/bash
# Pre-commit hook to detect potential secrets

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üîç Scanning for potential secrets..."

# Function to check for patterns
check_pattern() {
    local pattern="$1"
    local description="$2"
    
    # Get list of staged files
    local files=$(git diff --cached --name-only)
    
    if [ -z "$files" ]; then
        return 0
    fi
    
    # Check each file
    local found=0
    for file in $files; do
        if [ -f "$file" ]; then
            if grep -qE "$pattern" "$file" 2>/dev/null; then
                if [ $found -eq 0 ]; then
                    echo -e "${RED}‚ùå Potential secret found: ${description}${NC}"
                    found=1
                fi
                echo -e "${YELLOW}   File: $file${NC}"
                # Show matching line (truncated)
                local match=$(grep -nE "$pattern" "$file" 2>/dev/null | head -1 | cut -c1-100)
                echo -e "${YELLOW}   Match: ${match}...${NC}"
            fi
        fi
    done
    
    return $found
}

# Check for various secret patterns
FOUND_SECRETS=0

# JWT tokens
check_pattern 'eyJ[A-Za-z0-9_-]{10,}\.[A-Za-z0-9_-]{10,}\.[A-Za-z0-9_-]{10,}' "JWT Token" && FOUND_SECRETS=1

# AWS Access Keys
check_pattern 'AKIA[0-9A-Z]{16}' "AWS Access Key" && FOUND_SECRETS=1

# GitHub Tokens
check_pattern 'ghp_[a-zA-Z0-9]{36}' "GitHub Personal Access Token" && FOUND_SECRETS=1
check_pattern 'gho_[a-zA-Z0-9]{36}' "GitHub OAuth Token" && FOUND_SECRETS=1

# Generic API Keys (be careful with false positives)
check_pattern 'api[-_]?key["\s]*[:=]["\s]*["'\''][a-zA-Z0-9]{32,}["'\'']' "API Key" && FOUND_SECRETS=1

# Private Keys
check_pattern '-----BEGIN.*PRIVATE KEY-----' "Private Key" && FOUND_SECRETS=1

# Slack Tokens
check_pattern 'xox[baprs]-[0-9]{10,}-[0-9]{10,}-[a-zA-Z0-9]{24,}' "Slack Token" && FOUND_SECRETS=1

# Check for sensitive file names
echo "Checking for sensitive files..."
SENSITIVE_FILES=(
    ".env"
    ".env.local"
    ".env.production"
    "secrets.yml"
    "secrets.yaml"
    "credentials"
    ".twingate"
)

for sensitive_file in "${SENSITIVE_FILES[@]}"; do
    if git diff --cached --name-only | grep -q "^${sensitive_file}$"; then
        echo -e "${RED}‚ùå Attempting to commit sensitive file: ${sensitive_file}${NC}"
        echo "Add this file to .gitignore instead!"
        FOUND_SECRETS=1
    fi
done

# Check for files in .archive directory
if git diff --cached --name-only | grep -q "^\.archive/"; then
    echo -e "${RED}‚ùå Attempting to commit files from .archive directory${NC}"
    echo "This directory should not be committed!"
    FOUND_SECRETS=1
fi

# Check for PEM and KEY files
if git diff --cached --name-only | grep -qE '\.(pem|key|p12)$'; then
    echo -e "${RED}‚ùå Attempting to commit certificate/key files${NC}"
    echo "These files should not be committed!"
    FOUND_SECRETS=1
fi

# Final verdict
if [ $FOUND_SECRETS -eq 1 ]; then
    echo ""
    echo -e "${RED}‚ùå Commit blocked: Potential secrets or sensitive files detected!${NC}"
    echo ""
    echo "Options:"
    echo "1. Remove the secrets from your files"
    echo "2. Add sensitive files to .gitignore"
    echo "3. Use environment variables for secrets"
    echo "4. If this is a false positive, bypass with: git commit --no-verify"
    echo ""
    exit 1
else
    echo -e "${GREEN}‚úÖ No secrets detected. Proceeding with commit.${NC}"
fi

exit 0