{
  "master": {
    "tasks": [
      {
        "id": 11,
        "title": "Initialize Express TypeScript Project",
        "description": "Set up a new Express.js project with TypeScript configuration, including package.json, tsconfig.json, and basic project structure",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "details": "Create package.json with Express, TypeScript, and necessary dev dependencies. Configure tsconfig.json for Node.js development. Set up src directory structure.",
        "testStrategy": "Verify project builds and starts without errors",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize npm project",
            "description": "Run npm init and configure package.json with appropriate metadata",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 11
          },
          {
            "id": 2,
            "title": "Install dependencies",
            "description": "Install Express, TypeScript, and development dependencies",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 11
          },
          {
            "id": 3,
            "title": "Configure TypeScript",
            "description": "Create tsconfig.json with Node.js and Express appropriate settings",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 11
          },
          {
            "id": 4,
            "title": "Create project structure",
            "description": "Set up src directory with routes, middleware, and types subdirectories",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 11
          }
        ]
      },
      {
        "id": 12,
        "title": "Create User Type Definition",
        "description": "Define the User interface in TypeScript with id, name, email, and createdAt fields",
        "status": "pending",
        "dependencies": [
          11
        ],
        "priority": "high",
        "details": "Create src/types/user.ts with User interface. Include proper TypeScript types for all fields.",
        "testStrategy": "TypeScript compilation should pass without type errors",
        "subtasks": [
          {
            "id": 1,
            "title": "Create user.ts file",
            "description": "Create src/types/user.ts file with proper TypeScript structure",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 2,
            "title": "Define User interface",
            "description": "Define the User interface with id, name, email, and createdAt properties",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          }
        ]
      },
      {
        "id": 13,
        "title": "Implement Health Check Endpoint",
        "description": "Create GET /health endpoint that returns service status and timestamp",
        "status": "pending",
        "dependencies": [
          11
        ],
        "priority": "medium",
        "details": "Create src/routes/health.ts with a simple GET handler. Return JSON with status 'ok' and current timestamp.",
        "testStrategy": "Manual test with curl or Postman to verify 200 response",
        "subtasks": [
          {
            "id": 1,
            "title": "Create health route file",
            "description": "Create src/routes/health.ts with Express router setup",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 2,
            "title": "Implement health handler",
            "description": "Create GET /health handler that returns status and timestamp",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 3,
            "title": "Wire health routes to app",
            "description": "Import and use health router in main Express app",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 13
          }
        ]
      },
      {
        "id": 14,
        "title": "Implement User Routes",
        "description": "Create GET /users and POST /users endpoints with in-memory storage",
        "status": "pending",
        "dependencies": [
          11,
          12
        ],
        "priority": "high",
        "details": "Create src/routes/users.ts with handlers for listing and creating users. Use array for in-memory storage. Implement basic validation for POST.",
        "testStrategy": "Test both endpoints with curl/Postman. Verify data persists between requests.",
        "subtasks": [
          {
            "id": 1,
            "title": "Create users route file",
            "description": "Create src/routes/users.ts with Express router setup and in-memory storage array",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 14
          },
          {
            "id": 2,
            "title": "Implement GET /users handler",
            "description": "Create handler to return all users from in-memory array",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 14
          },
          {
            "id": 3,
            "title": "Implement POST /users handler",
            "description": "Create handler to add new users with validation",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 14
          },
          {
            "id": 4,
            "title": "Wire user routes to app",
            "description": "Import and use user router in main Express app",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 14
          }
        ]
      },
      {
        "id": 15,
        "title": "Add Error Handling Middleware",
        "description": "Implement global error handling middleware for consistent error responses",
        "status": "pending",
        "dependencies": [
          11
        ],
        "priority": "medium",
        "details": "Create src/middleware/error.ts with error handling middleware. Catch and format errors with appropriate HTTP status codes.",
        "testStrategy": "Test with invalid requests to verify error responses",
        "subtasks": [
          {
            "id": 1,
            "title": "Create error middleware file",
            "description": "Create src/middleware/error.ts with Express error handler setup",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 15
          },
          {
            "id": 2,
            "title": "Implement error handler function",
            "description": "Create error handling middleware function with proper error formatting",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 15
          },
          {
            "id": 3,
            "title": "Wire error middleware to app",
            "description": "Import and use error middleware in main Express app",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 15
          }
        ]
      },
      {
        "id": 16,
        "title": "Create README Documentation",
        "description": "Write comprehensive README with API documentation, setup instructions, and usage examples",
        "status": "pending",
        "dependencies": [
          13,
          14,
          15
        ],
        "priority": "low",
        "details": "Document all endpoints, request/response formats, setup steps, and include curl examples for testing.",
        "testStrategy": "Follow README instructions on fresh clone to verify accuracy",
        "subtasks": [
          {
            "id": 1,
            "title": "Create README file",
            "description": "Create README.md with project title and overview",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 16
          },
          {
            "id": 2,
            "title": "Document API endpoints",
            "description": "Add sections for all endpoints with request/response examples",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 16
          },
          {
            "id": 3,
            "title": "Add setup instructions",
            "description": "Write installation and development setup steps",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 16
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-08T01:46:12.816Z",
      "updated": "2025-07-08T01:46:12.816Z",
      "description": "Tasks for master context"
    }
  }
}