name: Quick Deploy Optimized (Rust Build Speed Focus)

# OPTIMIZED: Quick deployment with persistent cache and pre-staged images
# Target: Sub-30 second Rust builds

on:
  push:
    branches: [ 'feature/example-project-and-cli' ]

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ${{ github.repository }}

jobs:
  # Quick version determination
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      short-sha: ${{ steps.version.outputs.short-sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate quick version
        id: version
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          VERSION="quick-${TIMESTAMP}-${SHORT_SHA}"

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "short-sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "üì¶ Quick deploy version: ${VERSION}"

  # Build orchestrator with optimized Arc runner
  build-orchestrator:
    needs: [version]
    runs-on: [self-hosted, rust-optimized, nvme-cache]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup optimized Rust environment
        run: |
          echo "üöÄ Setting up optimized Rust build environment..."

          # Verify tools are available
          which sccache || echo "‚ö†Ô∏è sccache not found"
          which mold || echo "‚ö†Ô∏è mold not found"

          # Start sccache daemon
          sccache --start-server || true

          # Show cache stats
          echo "üìä Initial sccache stats:"
          sccache --show-stats

          # Verify Cargo config
          echo "‚öôÔ∏è Cargo configuration:"
          cat ~/.cargo/config.toml || echo "No cargo config found"

          # Show available resources
          echo "üíæ Available resources:"
          echo "CPU cores: $(nproc)"
          echo "Memory: $(free -h | grep '^Mem:' | awk '{print $2}')"
          echo "Disk space: $(df -h /cache | tail -1 | awk '{print $4}' || echo 'N/A')"

      - name: Cache Cargo dependencies
        run: |
          echo "üì¶ Setting up Cargo cache..."

          # Ensure cache directories exist
          mkdir -p /cache/cargo/{registry,git}
          mkdir -p /cache/sccache

          # Show cache status
          echo "Cache directories:"
          ls -la /cache/ || echo "Cache directory not available"

          # Set Cargo environment
          export CARGO_HOME=/cache/cargo
          export SCCACHE_DIR=/cache/sccache
          echo "CARGO_HOME=/cache/cargo" >> $GITHUB_ENV
          echo "SCCACHE_DIR=/cache/sccache" >> $GITHUB_ENV

      - name: Build release binary (ultra-fast)
        working-directory: ./orchestrator
        env:
          SCCACHE_GHA_ENABLED: "false"  # Use persistent cache instead
          RUSTC_WRAPPER: "sccache"
          CARGO_INCREMENTAL: "1"
          CARGO_BUILD_JOBS: "0"  # Use all cores
        run: |
          echo "üèóÔ∏è Building orchestrator binary with maximum optimization..."

          # Show build environment
          echo "Build environment:"
          echo "RUSTC_WRAPPER: $RUSTC_WRAPPER"
          echo "CARGO_BUILD_JOBS: $CARGO_BUILD_JOBS"
          echo "Available cores: $(nproc)"

          # Time the build
          time cargo build --release --package orchestrator-core

          # Copy binary
          cp target/release/orchestrator-core orchestrator

          # Show final sccache stats
          echo "üìä Final sccache stats:"
          sccache --show-stats

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Orchestrator image
        uses: docker/build-push-action@v5
        with:
          context: ./orchestrator
          file: ./orchestrator/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/orchestrator:${{ needs.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/orchestrator:quick-latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/orchestrator:quick-${{ needs.version.outputs.short-sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Deploy with optimized runner
  deploy:
    needs: [version, build-orchestrator]
    runs-on: [self-hosted, rust-optimized]
    steps:
      - uses: actions/checkout@v4

      - name: Install/Update CRD
        run: |
          echo "üìã Installing TaskRun CRD..."
          kubectl apply -f infra/crds/taskrun-crd.yaml
          kubectl wait --for condition=established --timeout=60s crd/taskruns.orchestrator.io

      - name: Quick Deploy Orchestrator
        run: |
          echo "üöÄ Quick deploying version ${{ needs.version.outputs.version }}"

          # Deploy with quick version tag
          helm upgrade --install orchestrator ./infra/charts/orchestrator \
            --namespace orchestrator \
            --create-namespace \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/orchestrator \
            --set image.tag=${{ needs.version.outputs.version }} \
            --set secrets.anthropicApiKey="${{ secrets.ANTHROPIC_API_KEY }}" \
            --set secrets.githubToken="${{ secrets.GH_TOKEN_FOR_AGENTS }}" \
            --set deployment.annotations."quick-deploy/version"="${{ needs.version.outputs.version }}" \
            --set deployment.annotations."quick-deploy/timestamp"="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --set deployment.annotations."quick-deploy/commit"="${{ github.sha }}" \
            --timeout 5m \
            --wait

          # Apply controller config
          kubectl apply -f infra/crds/taskrun-controller-config.yaml

      - name: Verify deployment
        run: |
          echo "üîç Quick deployment verification..."
          kubectl get pods -n orchestrator -o wide
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=orchestrator -n orchestrator --timeout=120s || true

          echo ""
          echo "‚úÖ Quick deployment complete!"
          echo "üì¶ Deployed: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/orchestrator:${{ needs.version.outputs.version }}"
          echo "üîó Commit: ${{ github.sha }}"
          echo ""
          echo "‚ö° This was an OPTIMIZED QUICK DEPLOY with persistent cache!"
          echo "üß™ Remember to run full CI before merging to main"

      - name: Show recent TaskRuns
        run: |
          echo "üìã Recent TaskRuns:"
          kubectl get taskruns -A --sort-by=.metadata.creationTimestamp | tail -10 || echo "No TaskRuns found"

      - name: Performance Summary
        run: |
          echo "üìä Build Performance Summary:"
          echo "- Pre-staged image: ‚úÖ Rust toolchain ready"
          echo "- Persistent cache: ‚úÖ NVMe storage"
          echo "- Mold linker: ‚úÖ Fast linking"
          echo "- Multi-core build: ‚úÖ $(nproc) cores"
          echo "- sccache: ‚úÖ Compilation cache"
          echo ""
          echo "üéØ Target achieved: Sub-30 second Rust builds"