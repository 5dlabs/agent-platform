name: Quick Deploy (Test Only)

# TEMPORARY: Quick deployment for testing changes
# Skips all tests and linting for rapid iteration
# Will be removed once feature is stable

on:
  push:
    branches: [ 'feature/example-project-and-cli' ]

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ${{ github.repository }}

jobs:
  # Quick version determination
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      short-sha: ${{ steps.version.outputs.short-sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate quick version
        id: version
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          VERSION="quick-${TIMESTAMP}-${SHORT_SHA}"

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "short-sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "📦 Quick deploy version: ${VERSION}"

  # Build only orchestrator (skip Claude Code for now)
  build-orchestrator:
    needs: [version]
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: orchestrator -> target
          shared-key: "rust-cache-agent-platform-quick"
          cache-targets: true
          cache-all-crates: true
          cache-on-failure: true
          save-if: true

      - name: Build release binary (no tests)
        working-directory: ./orchestrator
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
        run: |
          echo "🏗️ Building orchestrator binary (skipping tests)..."
          cargo build --release --package orchestrator-core
          cp target/release/orchestrator-core orchestrator

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Orchestrator image
        uses: docker/build-push-action@v5
        with:
          context: ./orchestrator
          file: ./orchestrator/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/orchestrator:${{ needs.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/orchestrator:quick-latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/orchestrator:quick-${{ needs.version.outputs.short-sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Deploy immediately
  deploy:
    needs: [version, build-orchestrator]
    runs-on: [self-hosted, rust-fast]
    steps:
      - uses: actions/checkout@v4

      - name: Setup tools
        run: |
          mkdir -p $HOME/bin
          if [ -f /shared/kubectl ]; then
            cp /shared/kubectl $HOME/bin/
            chmod +x $HOME/bin/kubectl
          fi
          if [ -f /shared/helm ]; then
            cp /shared/helm $HOME/bin/
            chmod +x $HOME/bin/helm
          fi
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Install/Update CRD
        run: |
          echo "📋 Installing TaskRun CRD..."
          kubectl apply -f infra/crds/taskrun-crd.yaml
          kubectl wait --for condition=established --timeout=60s crd/taskruns.orchestrator.io

      - name: Quick Deploy Orchestrator
        run: |
          echo "🚀 Quick deploying version ${{ needs.version.outputs.version }}"

          # Deploy with quick version tag
          helm upgrade --install orchestrator ./infra/charts/orchestrator \
            --namespace orchestrator \
            --create-namespace \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/orchestrator \
            --set image.tag=${{ needs.version.outputs.version }} \
            --set secrets.anthropicApiKey="${{ secrets.ANTHROPIC_API_KEY }}" \
            --set secrets.githubToken="${{ secrets.GH_TOKEN_FOR_AGENTS }}" \
            --set deployment.annotations."quick-deploy/version"="${{ needs.version.outputs.version }}" \
            --set deployment.annotations."quick-deploy/timestamp"="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --set deployment.annotations."quick-deploy/commit"="${{ github.sha }}" \
            --timeout 5m \
            --wait

          # Apply controller config
          kubectl apply -f infra/crds/taskrun-controller-config.yaml

      - name: Verify deployment
        run: |
          echo "🔍 Quick deployment verification..."
          kubectl get pods -n orchestrator -o wide
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=orchestrator -n orchestrator --timeout=120s || true

          echo ""
          echo "✅ Quick deployment complete!"
          echo "📦 Deployed: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/orchestrator:${{ needs.version.outputs.version }}"
          echo "🔗 Commit: ${{ github.sha }}"
          echo ""
          echo "⚡ This was a QUICK DEPLOY - no tests were run!"
          echo "🧪 Remember to run full CI before merging to main"

      - name: Show recent TaskRuns
        run: |
          echo "📋 Recent TaskRuns:"
          kubectl get taskruns -A --sort-by=.metadata.creationTimestamp | tail -10 || echo "No TaskRuns found"