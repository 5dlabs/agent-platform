name: Quick Deploy (Test Only)

# TEMPORARY: Quick deployment for testing changes
# Skips all tests and linting for rapid iteration
# Will be removed once feature is stable

on:
  push:
    branches: [ 'feature/example-project-and-cli' ]

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ${{ github.repository }}

jobs:
  # Quick version determination
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      short-sha: ${{ steps.version.outputs.short-sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate quick version
        id: version
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          VERSION="quick-${TIMESTAMP}-${SHORT_SHA}"

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "short-sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "📦 Quick deploy version: ${VERSION}"

  # Build only orchestrator (skip Claude Code for now)
  build-orchestrator:
    needs: [version]
    runs-on: [self-hosted, rust-fast]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup optimized Rust environment
        run: |
          echo "🚀 Setting up ULTRA-OPTIMIZED Rust build environment..."

          # Install system dependencies first (critical for OpenSSL)
          echo "📦 Installing system dependencies..."
          sudo apt-get update -qq
          sudo apt-get install -y pkg-config libssl-dev build-essential clang

          # Try to install mold (fallback if not available)
          echo "⚡ Installing mold linker..."
          if ! sudo apt-get install -y mold; then
            echo "⚠️ Mold not available in apt, trying manual install..."
            wget -q https://github.com/rui314/mold/releases/download/v2.4.0/mold-2.4.0-x86_64-linux.tar.gz
            tar -xzf mold-2.4.0-x86_64-linux.tar.gz
            sudo cp mold-2.4.0-x86_64-linux/bin/mold /usr/local/bin/
            sudo chmod +x /usr/local/bin/mold
          fi

          # Install Rust if not available
          if ! command -v cargo &> /dev/null; then
            echo "📦 Installing Rust toolchain..."
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
            source ~/.cargo/env
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          else
            echo "✅ Rust already available"
          fi

          # Install sccache for compilation caching
          echo "⚡ Installing sccache..."
          if ! command -v sccache &> /dev/null; then
            cargo install sccache --locked
          fi

          # Setup build optimizations (with fallbacks)
          echo "🔧 Configuring build optimizations..."
          mkdir -p ~/.cargo

          # Create cargo config with conditional mold support
          if command -v mold &> /dev/null; then
            echo "✅ Using mold linker"
            cat > ~/.cargo/config.toml << 'EOF'
          [build]
          rustc-wrapper = "sccache"

          [target.x86_64-unknown-linux-gnu]
          linker = "clang"
          rustflags = ["-C", "link-arg=-fuse-ld=mold", "-C", "target-cpu=native"]

          [registries.crates-io]
          protocol = "sparse"
          EOF
          else
            echo "⚠️ Falling back to default linker"
            cat > ~/.cargo/config.toml << 'EOF'
          [build]
          rustc-wrapper = "sccache"

          [target.x86_64-unknown-linux-gnu]
          linker = "clang"
          rustflags = ["-C", "target-cpu=native"]

          [registries.crates-io]
          protocol = "sparse"
          EOF
          fi

          # Verify installations
          echo "🔍 Verifying installations..."
          rustc --version
          cargo --version
          pkg-config --version
          openssl version
          clang --version
          if command -v mold &> /dev/null; then
            mold --version
          else
            echo "⚠️ mold not available"
          fi
          sccache --version

          # Show available resources
          echo "💾 Available resources:"
          echo "CPU cores: $(nproc)"
          echo "Memory: $(free -h | grep '^Mem:' | awk '{print $2}')"
          echo "Disk space: $(df -h . | tail -1 | awk '{print $4}')"

      - name: Setup sccache
        run: |
          echo "🗄️ Configuring persistent sccache..."

          # Use persistent cache if available, fallback to temp
          if [ -d "/cache/sccache" ]; then
            export SCCACHE_DIR="/cache/sccache"
            echo "✅ Using persistent sccache at /cache/sccache"
          else
            export SCCACHE_DIR="$HOME/.cache/sccache"
            mkdir -p "$SCCACHE_DIR"
            echo "⚠️ Using temporary sccache at $HOME/.cache/sccache"
          fi

          export SCCACHE_CACHE_SIZE="8G"

          # Start sccache server
          sccache --start-server || true
          echo "📊 Current sccache stats:"
          sccache --show-stats

      - name: Setup cargo cache
        run: |
          echo "📦 Configuring cargo cache..."

          # Use persistent cargo cache if available
          if [ -d "/cache/cargo" ]; then
            export CARGO_HOME="/cache/cargo"
            echo "✅ Using persistent cargo cache at /cache/cargo"
          else
            echo "⚠️ Using default cargo cache"
          fi

          # Show cache status
          if [ -d "$CARGO_HOME" ]; then
            echo "Cargo cache size: $(du -sh $CARGO_HOME 2>/dev/null || echo 'Empty')"
          fi

      - name: Build release binary (ultra-fast)
        working-directory: ./orchestrator
        env:
          CARGO_INCREMENTAL: "1"
          RUSTC_WRAPPER: "sccache"
          # Use persistent cache if available
          SCCACHE_DIR: "/cache/sccache"
          SCCACHE_CACHE_SIZE: "8G"
          CARGO_HOME: "/cache/cargo"
          # Optimize for build speed
          CARGO_NET_GIT_FETCH_WITH_CLI: "true"
          CARGO_REGISTRIES_CRATES_IO_PROTOCOL: "sparse"
          # Use all available cores
          CARGO_BUILD_JOBS: "0"
          # Memory and performance optimizations
          RUSTFLAGS: "-C target-cpu=native -C opt-level=3 -C lto=thin -C codegen-units=1"
        run: |
          echo "🏗️ Building orchestrator binary with MAXIMUM OPTIMIZATION..."

          # Ensure cache directories exist (fallback to temp if persistent not available)
          if [ ! -d "/cache/sccache" ]; then
            export SCCACHE_DIR="$HOME/.cache/sccache"
            mkdir -p "$SCCACHE_DIR"
            echo "⚠️ Using temporary sccache"
          fi

          if [ ! -d "/cache/cargo" ]; then
            export CARGO_HOME="$HOME/.cargo"
            echo "⚠️ Using default cargo home"
          fi

          # Show build environment
          echo "Build environment:"
          echo "CARGO_BUILD_JOBS: $CARGO_BUILD_JOBS (0 = use all cores)"
          echo "Available cores: $(nproc)"
          echo "RUSTFLAGS: $RUSTFLAGS"
          echo "RUSTC_WRAPPER: $RUSTC_WRAPPER"
          echo "SCCACHE_DIR: $SCCACHE_DIR"
          echo "CARGO_HOME: $CARGO_HOME"

          # Pre-warm sccache
          sccache --start-server || true
          echo "📊 Initial sccache stats:"
          sccache --show-stats

          # Time the build with detailed output
          echo "⏱️ Starting timed build..."
          time cargo build --release --package orchestrator-core

          # Show final sccache stats
          echo "📊 Final sccache stats:"
          sccache --show-stats

          # Copy binary
          cp target/release/orchestrator-core orchestrator

          # Show binary info
          echo "📦 Built binary info:"
          ls -lh orchestrator
          file orchestrator

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Orchestrator image
        uses: docker/build-push-action@v5
        with:
          context: ./orchestrator
          file: ./orchestrator/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/orchestrator:${{ needs.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/orchestrator:quick-latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/orchestrator:quick-${{ needs.version.outputs.short-sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Deploy immediately
  deploy:
    needs: [version, build-orchestrator]
    runs-on: [self-hosted, rust-fast]
    steps:
      - uses: actions/checkout@v4

      - name: Setup tools
        run: |
          mkdir -p $HOME/bin
          if [ -f /shared/kubectl ]; then
            cp /shared/kubectl $HOME/bin/
            chmod +x $HOME/bin/kubectl
          fi
          if [ -f /shared/helm ]; then
            cp /shared/helm $HOME/bin/
            chmod +x $HOME/bin/helm
          fi
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Install/Update CRD
        run: |
          echo "📋 Installing TaskRun CRD..."
          kubectl apply -f infra/crds/taskrun-crd.yaml
          kubectl wait --for condition=established --timeout=60s crd/taskruns.orchestrator.io

      - name: Quick Deploy Orchestrator
        run: |
          echo "🚀 Quick deploying version ${{ needs.version.outputs.version }}"

          # Deploy with quick version tag
          helm upgrade --install orchestrator ./infra/charts/orchestrator \
            --namespace orchestrator \
            --create-namespace \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/orchestrator \
            --set image.tag=${{ needs.version.outputs.version }} \
            --set secrets.anthropicApiKey="${{ secrets.ANTHROPIC_API_KEY }}" \
            --set secrets.githubToken="${{ secrets.GH_TOKEN_FOR_AGENTS }}" \
            --set deployment.annotations."quick-deploy/version"="${{ needs.version.outputs.version }}" \
            --set deployment.annotations."quick-deploy/timestamp"="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --set deployment.annotations."quick-deploy/commit"="${{ github.sha }}" \
            --timeout 5m \
            --wait

          # Apply controller config
          kubectl apply -f infra/crds/taskrun-controller-config.yaml

      - name: Verify deployment
        run: |
          echo "🔍 Quick deployment verification..."
          kubectl get pods -n orchestrator -o wide
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=orchestrator -n orchestrator --timeout=120s || true

          echo ""
          echo "✅ Quick deployment complete!"
          echo "📦 Deployed: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/orchestrator:${{ needs.version.outputs.version }}"
          echo "🔗 Commit: ${{ github.sha }}"
          echo ""
          echo "⚡ This was a QUICK DEPLOY - no tests were run!"
          echo "🧪 Remember to run full CI before merging to main"

      - name: Show recent TaskRuns
        run: |
          echo "📋 Recent TaskRuns:"
          kubectl get taskruns -A --sort-by=.metadata.creationTimestamp | tail -10 || echo "No TaskRuns found"