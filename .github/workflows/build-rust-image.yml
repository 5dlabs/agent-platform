name: Build Pre-staged Rust Image

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ 'feature/example-project-and-cli' ]  # Trigger on your branch
    paths:
      - 'infra/images/rust-builder/**'
      - '.github/workflows/build-rust-image.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ${{ github.repository }}
  IMAGE_NAME: rust-builder

jobs:
  build-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/images/rust-builder/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image summary
        run: |
          echo "üéâ Pre-staged Rust builder image built successfully!"
          echo ""
          echo "üì¶ Image details:"
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Repository: ${{ env.IMAGE_BASE }}"
          echo "Image: ${{ env.IMAGE_NAME }}"
          echo ""
          echo "üè∑Ô∏è Tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo ""
          echo "üöÄ Ready to deploy optimized Arc runners!"
          echo ""
          echo "Next steps:"
          echo "1. Run: kubectl apply -f infra/arc/arc-org-runners-optimized.yaml"
          echo "2. Wait for runners to be ready"
          echo "3. Test with the optimized workflow"